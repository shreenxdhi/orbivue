{"ast":null,"code":"// Mock weather data for different locations\nconst mockWeatherData = {\n  default: {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0))\n  },\n  'new york': {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0))\n  },\n  'san francisco': {\n    location: 'San Francisco',\n    temperature: 17.2,\n    feelsLike: 16.5,\n    humidity: 72,\n    pressure: 1015,\n    windSpeed: 8.2,\n    windDirection: 'W',\n    description: 'clear sky',\n    icon: '01d',\n    sunrise: new Date(new Date().setHours(6, 10, 0, 0)),\n    sunset: new Date(new Date().setHours(19, 55, 0, 0))\n  },\n  'london': {\n    location: 'London',\n    temperature: 15.8,\n    feelsLike: 15.1,\n    humidity: 78,\n    pressure: 1008,\n    windSpeed: 6.3,\n    windDirection: 'SW',\n    description: 'light rain',\n    icon: '10d',\n    sunrise: new Date(new Date().setHours(4, 50, 0, 0)),\n    sunset: new Date(new Date().setHours(21, 30, 0, 0))\n  },\n  'tokyo': {\n    location: 'Tokyo',\n    temperature: 28.3,\n    feelsLike: 30.5,\n    humidity: 70,\n    pressure: 1005,\n    windSpeed: 4.1,\n    windDirection: 'SE',\n    description: 'scattered clouds',\n    icon: '03d',\n    sunrise: new Date(new Date().setHours(4, 30, 0, 0)),\n    sunset: new Date(new Date().setHours(18, 45, 0, 0))\n  },\n  'sydney': {\n    location: 'Sydney',\n    temperature: 19.6,\n    feelsLike: 19.2,\n    humidity: 60,\n    pressure: 1020,\n    windSpeed: 7.5,\n    windDirection: 'E',\n    description: 'few clouds',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(6, 20, 0, 0)),\n    sunset: new Date(new Date().setHours(17, 10, 0, 0))\n  }\n};\n\n// Generate mock forecast data\nconst generateMockForecast = location => {\n  const forecast = [];\n  const weatherIcons = ['01d', '02d', '03d', '04d', '09d', '10d', '11d', '13d', '50d'];\n  const weatherDescriptions = ['clear sky', 'few clouds', 'scattered clouds', 'broken clouds', 'shower rain', 'rain', 'thunderstorm', 'snow', 'mist'];\n  const today = new Date();\n  for (let i = 1; i <= 5; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() + i);\n    const randomIconIndex = Math.floor(Math.random() * weatherIcons.length);\n    const baseTemp = location.toLowerCase().includes('sydney') || location.toLowerCase().includes('tokyo') ? 22 + Math.random() * 8 : location.toLowerCase().includes('london') ? 10 + Math.random() * 8 : 15 + Math.random() * 10;\n    forecast.push({\n      date,\n      minTemp: baseTemp - (2 + Math.random() * 4),\n      maxTemp: baseTemp + (1 + Math.random() * 3),\n      description: weatherDescriptions[randomIconIndex],\n      icon: weatherIcons[randomIconIndex],\n      precipitation: Math.round(Math.random() * 100),\n      humidity: 40 + Math.round(Math.random() * 50),\n      windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10\n    });\n  }\n  return forecast;\n};\n\n// Get weather data for location\nexport const fetchWeatherData = async (lat, lon, searchQuery) => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n\n  // For demo, we'll return mock data\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    if (searchQuery) {\n      const lowerCaseQuery = searchQuery.toLowerCase();\n\n      // Check if we have mock data for the search query\n      if (mockWeatherData[lowerCaseQuery]) {\n        return mockWeatherData[lowerCaseQuery];\n      }\n\n      // If not found, create a random weather for the location\n      // This would be a geocoding API call in a real app\n      return {\n        location: searchQuery,\n        temperature: 15 + Math.random() * 15,\n        feelsLike: 14 + Math.random() * 17,\n        humidity: 40 + Math.round(Math.random() * 50),\n        pressure: 1000 + Math.round(Math.random() * 30),\n        windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10,\n        windDirection: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'][Math.floor(Math.random() * 8)],\n        description: ['clear sky', 'few clouds', 'scattered clouds', 'broken clouds', 'shower rain', 'rain'][Math.floor(Math.random() * 6)],\n        icon: ['01d', '02d', '03d', '04d', '09d', '10d'][Math.floor(Math.random() * 6)],\n        sunrise: new Date(new Date().setHours(6, 0, 0, 0)),\n        sunset: new Date(new Date().setHours(20, 0, 0, 0))\n      };\n    }\n\n    // Use user coordinates to determine which mock city is closest\n    // For demo, we'll just return the default data\n    return mockWeatherData.default;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw new Error('Error fetching weather data');\n  }\n};\n\n// Get list of available locations\nexport const getAvailableLocations = () => {\n  return Object.keys(mockWeatherData).filter(key => key !== 'default').map(key => mockWeatherData[key].location);\n};\n\n// Get forecast for location\nexport const fetchForecast = async (lat, lon, searchQuery) => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 300));\n    const location = searchQuery || 'default';\n    return generateMockForecast(location);\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    throw new Error('Error fetching forecast data');\n  }\n};","map":{"version":3,"names":["mockWeatherData","default","location","temperature","feelsLike","humidity","pressure","windSpeed","windDirection","description","icon","sunrise","Date","setHours","sunset","generateMockForecast","forecast","weatherIcons","weatherDescriptions","today","i","date","setDate","getDate","randomIconIndex","Math","floor","random","length","baseTemp","toLowerCase","includes","push","minTemp","maxTemp","precipitation","round","fetchWeatherData","lat","lon","searchQuery","Promise","resolve","setTimeout","lowerCaseQuery","error","console","Error","getAvailableLocations","Object","keys","filter","key","map","fetchForecast"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/weatherService.ts"],"sourcesContent":["import axios from 'axios';\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  feelsLike: number;\n  humidity: number;\n  pressure: number;\n  windSpeed: number;\n  windDirection: string;\n  description: string;\n  icon: string;\n  sunrise: Date;\n  sunset: Date;\n}\n\ninterface ForecastDay {\n  date: Date;\n  minTemp: number;\n  maxTemp: number;\n  description: string;\n  icon: string;\n  precipitation: number;\n  humidity: number;\n  windSpeed: number;\n}\n\n// Mock weather data for different locations\nconst mockWeatherData: { [key: string]: WeatherData } = {\n  default: {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0)),\n  },\n  'new york': {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0)),\n  },\n  'san francisco': {\n    location: 'San Francisco',\n    temperature: 17.2,\n    feelsLike: 16.5,\n    humidity: 72,\n    pressure: 1015,\n    windSpeed: 8.2,\n    windDirection: 'W',\n    description: 'clear sky',\n    icon: '01d',\n    sunrise: new Date(new Date().setHours(6, 10, 0, 0)),\n    sunset: new Date(new Date().setHours(19, 55, 0, 0)),\n  },\n  'london': {\n    location: 'London',\n    temperature: 15.8,\n    feelsLike: 15.1,\n    humidity: 78,\n    pressure: 1008,\n    windSpeed: 6.3,\n    windDirection: 'SW',\n    description: 'light rain',\n    icon: '10d',\n    sunrise: new Date(new Date().setHours(4, 50, 0, 0)),\n    sunset: new Date(new Date().setHours(21, 30, 0, 0)),\n  },\n  'tokyo': {\n    location: 'Tokyo',\n    temperature: 28.3,\n    feelsLike: 30.5,\n    humidity: 70,\n    pressure: 1005,\n    windSpeed: 4.1,\n    windDirection: 'SE',\n    description: 'scattered clouds',\n    icon: '03d',\n    sunrise: new Date(new Date().setHours(4, 30, 0, 0)),\n    sunset: new Date(new Date().setHours(18, 45, 0, 0)),\n  },\n  'sydney': {\n    location: 'Sydney',\n    temperature: 19.6,\n    feelsLike: 19.2,\n    humidity: 60,\n    pressure: 1020,\n    windSpeed: 7.5,\n    windDirection: 'E',\n    description: 'few clouds',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(6, 20, 0, 0)),\n    sunset: new Date(new Date().setHours(17, 10, 0, 0)),\n  },\n};\n\n// Generate mock forecast data\nconst generateMockForecast = (location: string): ForecastDay[] => {\n  const forecast: ForecastDay[] = [];\n  const weatherIcons = ['01d', '02d', '03d', '04d', '09d', '10d', '11d', '13d', '50d'];\n  const weatherDescriptions = [\n    'clear sky', 'few clouds', 'scattered clouds', 'broken clouds',\n    'shower rain', 'rain', 'thunderstorm', 'snow', 'mist'\n  ];\n  \n  const today = new Date();\n  \n  for (let i = 1; i <= 5; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() + i);\n    \n    const randomIconIndex = Math.floor(Math.random() * weatherIcons.length);\n    const baseTemp = location.toLowerCase().includes('sydney') || location.toLowerCase().includes('tokyo')\n      ? 22 + Math.random() * 8\n      : location.toLowerCase().includes('london')\n        ? 10 + Math.random() * 8\n        : 15 + Math.random() * 10;\n    \n    forecast.push({\n      date,\n      minTemp: baseTemp - (2 + Math.random() * 4),\n      maxTemp: baseTemp + (1 + Math.random() * 3),\n      description: weatherDescriptions[randomIconIndex],\n      icon: weatherIcons[randomIconIndex],\n      precipitation: Math.round(Math.random() * 100),\n      humidity: 40 + Math.round(Math.random() * 50),\n      windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10,\n    });\n  }\n  \n  return forecast;\n};\n\n// Get weather data for location\nexport const fetchWeatherData = async (\n  lat: number, \n  lon: number, \n  searchQuery?: string\n): Promise<WeatherData> => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n  \n  // For demo, we'll return mock data\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    if (searchQuery) {\n      const lowerCaseQuery = searchQuery.toLowerCase();\n      \n      // Check if we have mock data for the search query\n      if (mockWeatherData[lowerCaseQuery]) {\n        return mockWeatherData[lowerCaseQuery];\n      }\n      \n      // If not found, create a random weather for the location\n      // This would be a geocoding API call in a real app\n      return {\n        location: searchQuery,\n        temperature: 15 + Math.random() * 15,\n        feelsLike: 14 + Math.random() * 17,\n        humidity: 40 + Math.round(Math.random() * 50),\n        pressure: 1000 + Math.round(Math.random() * 30),\n        windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10,\n        windDirection: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'][Math.floor(Math.random() * 8)],\n        description: ['clear sky', 'few clouds', 'scattered clouds', 'broken clouds', 'shower rain', 'rain'][Math.floor(Math.random() * 6)],\n        icon: ['01d', '02d', '03d', '04d', '09d', '10d'][Math.floor(Math.random() * 6)],\n        sunrise: new Date(new Date().setHours(6, 0, 0, 0)),\n        sunset: new Date(new Date().setHours(20, 0, 0, 0)),\n      };\n    }\n    \n    // Use user coordinates to determine which mock city is closest\n    // For demo, we'll just return the default data\n    return mockWeatherData.default;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw new Error('Error fetching weather data');\n  }\n};\n\n// Get list of available locations\nexport const getAvailableLocations = (): string[] => {\n  return Object.keys(mockWeatherData)\n    .filter(key => key !== 'default')\n    .map(key => mockWeatherData[key].location);\n};\n\n// Get forecast for location\nexport const fetchForecast = async (\n  lat: number, \n  lon: number,\n  searchQuery?: string\n): Promise<ForecastDay[]> => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n  \n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    const location = searchQuery || 'default';\n    return generateMockForecast(location);\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    throw new Error('Error fetching forecast data');\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}