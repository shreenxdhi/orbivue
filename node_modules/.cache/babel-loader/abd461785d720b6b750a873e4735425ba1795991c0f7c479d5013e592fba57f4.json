{"ast":null,"code":"// Mock weather data for different locations\nconst mockWeatherData={default:{location:'New York',temperature:22.5,feelsLike:23.2,humidity:65,pressure:1012,windSpeed:5.7,windDirection:'NE',description:'partly cloudy',icon:'02d',sunrise:new Date(new Date().setHours(5,45,0,0)),sunset:new Date(new Date().setHours(20,15,0,0))},'new york':{location:'New York',temperature:22.5,feelsLike:23.2,humidity:65,pressure:1012,windSpeed:5.7,windDirection:'NE',description:'partly cloudy',icon:'02d',sunrise:new Date(new Date().setHours(5,45,0,0)),sunset:new Date(new Date().setHours(20,15,0,0))},'san francisco':{location:'San Francisco',temperature:17.2,feelsLike:16.5,humidity:72,pressure:1015,windSpeed:8.2,windDirection:'W',description:'clear sky',icon:'01d',sunrise:new Date(new Date().setHours(6,10,0,0)),sunset:new Date(new Date().setHours(19,55,0,0))},'london':{location:'London',temperature:15.8,feelsLike:15.1,humidity:78,pressure:1008,windSpeed:6.3,windDirection:'SW',description:'light rain',icon:'10d',sunrise:new Date(new Date().setHours(4,50,0,0)),sunset:new Date(new Date().setHours(21,30,0,0))},'tokyo':{location:'Tokyo',temperature:28.3,feelsLike:30.5,humidity:70,pressure:1005,windSpeed:4.1,windDirection:'SE',description:'scattered clouds',icon:'03d',sunrise:new Date(new Date().setHours(4,30,0,0)),sunset:new Date(new Date().setHours(18,45,0,0))},'sydney':{location:'Sydney',temperature:19.6,feelsLike:19.2,humidity:60,pressure:1020,windSpeed:7.5,windDirection:'E',description:'few clouds',icon:'02d',sunrise:new Date(new Date().setHours(6,20,0,0)),sunset:new Date(new Date().setHours(17,10,0,0))}};// Generate mock forecast data\nconst generateMockForecast=location=>{const forecast=[];const weatherIcons=['01d','02d','03d','04d','09d','10d','11d','13d','50d'];const weatherDescriptions=['clear sky','few clouds','scattered clouds','broken clouds','shower rain','rain','thunderstorm','snow','mist'];const today=new Date();for(let i=1;i<=5;i++){const date=new Date(today);date.setDate(today.getDate()+i);const randomIconIndex=Math.floor(Math.random()*weatherIcons.length);const baseTemp=location.toLowerCase().includes('sydney')||location.toLowerCase().includes('tokyo')?22+Math.random()*8:location.toLowerCase().includes('london')?10+Math.random()*8:15+Math.random()*10;forecast.push({date,minTemp:baseTemp-(2+Math.random()*4),maxTemp:baseTemp+(1+Math.random()*3),description:weatherDescriptions[randomIconIndex],icon:weatherIcons[randomIconIndex],precipitation:Math.round(Math.random()*100),humidity:40+Math.round(Math.random()*50),windSpeed:2+Math.round(Math.random()*10*10)/10});}return forecast;};// Get weather data for location\nexport const fetchWeatherData=async(lat,lon,searchQuery)=>{// In a real application, this would call the OpenWeatherMap API\n// Example API endpoint: https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n// For demo, we'll return mock data\ntry{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,500));if(searchQuery){const lowerCaseQuery=searchQuery.toLowerCase();// Check if we have mock data for the search query\nif(mockWeatherData[lowerCaseQuery]){return mockWeatherData[lowerCaseQuery];}// If not found, create a random weather for the location\n// This would be a geocoding API call in a real app\nreturn{location:searchQuery,temperature:15+Math.random()*15,feelsLike:14+Math.random()*17,humidity:40+Math.round(Math.random()*50),pressure:1000+Math.round(Math.random()*30),windSpeed:2+Math.round(Math.random()*10*10)/10,windDirection:['N','NE','E','SE','S','SW','W','NW'][Math.floor(Math.random()*8)],description:['clear sky','few clouds','scattered clouds','broken clouds','shower rain','rain'][Math.floor(Math.random()*6)],icon:['01d','02d','03d','04d','09d','10d'][Math.floor(Math.random()*6)],sunrise:new Date(new Date().setHours(6,0,0,0)),sunset:new Date(new Date().setHours(20,0,0,0))};}// Use user coordinates to determine which mock city is closest\n// For demo, we'll just return the default data\nreturn mockWeatherData.default;}catch(error){console.error('Error fetching weather data:',error);throw new Error('Error fetching weather data');}};// Get forecast for location\nexport const fetchForecast=async(lat,lon,searchQuery)=>{// In a real application, this would call the OpenWeatherMap API\n// Example API endpoint: https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\ntry{// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,300));const location=searchQuery||'default';return generateMockForecast(location);}catch(error){console.error('Error fetching forecast data:',error);throw new Error('Error fetching forecast data');}};","map":{"version":3,"names":["mockWeatherData","default","location","temperature","feelsLike","humidity","pressure","windSpeed","windDirection","description","icon","sunrise","Date","setHours","sunset","generateMockForecast","forecast","weatherIcons","weatherDescriptions","today","i","date","setDate","getDate","randomIconIndex","Math","floor","random","length","baseTemp","toLowerCase","includes","push","minTemp","maxTemp","precipitation","round","fetchWeatherData","lat","lon","searchQuery","Promise","resolve","setTimeout","lowerCaseQuery","error","console","Error","fetchForecast"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/weatherService.ts"],"sourcesContent":["import axios from 'axios';\n\ninterface WeatherData {\n  location: string;\n  temperature: number;\n  feelsLike: number;\n  humidity: number;\n  pressure: number;\n  windSpeed: number;\n  windDirection: string;\n  description: string;\n  icon: string;\n  sunrise: Date;\n  sunset: Date;\n}\n\ninterface ForecastDay {\n  date: Date;\n  minTemp: number;\n  maxTemp: number;\n  description: string;\n  icon: string;\n  precipitation: number;\n  humidity: number;\n  windSpeed: number;\n}\n\n// Mock weather data for different locations\nconst mockWeatherData: { [key: string]: WeatherData } = {\n  default: {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0)),\n  },\n  'new york': {\n    location: 'New York',\n    temperature: 22.5,\n    feelsLike: 23.2,\n    humidity: 65,\n    pressure: 1012,\n    windSpeed: 5.7,\n    windDirection: 'NE',\n    description: 'partly cloudy',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(5, 45, 0, 0)),\n    sunset: new Date(new Date().setHours(20, 15, 0, 0)),\n  },\n  'san francisco': {\n    location: 'San Francisco',\n    temperature: 17.2,\n    feelsLike: 16.5,\n    humidity: 72,\n    pressure: 1015,\n    windSpeed: 8.2,\n    windDirection: 'W',\n    description: 'clear sky',\n    icon: '01d',\n    sunrise: new Date(new Date().setHours(6, 10, 0, 0)),\n    sunset: new Date(new Date().setHours(19, 55, 0, 0)),\n  },\n  'london': {\n    location: 'London',\n    temperature: 15.8,\n    feelsLike: 15.1,\n    humidity: 78,\n    pressure: 1008,\n    windSpeed: 6.3,\n    windDirection: 'SW',\n    description: 'light rain',\n    icon: '10d',\n    sunrise: new Date(new Date().setHours(4, 50, 0, 0)),\n    sunset: new Date(new Date().setHours(21, 30, 0, 0)),\n  },\n  'tokyo': {\n    location: 'Tokyo',\n    temperature: 28.3,\n    feelsLike: 30.5,\n    humidity: 70,\n    pressure: 1005,\n    windSpeed: 4.1,\n    windDirection: 'SE',\n    description: 'scattered clouds',\n    icon: '03d',\n    sunrise: new Date(new Date().setHours(4, 30, 0, 0)),\n    sunset: new Date(new Date().setHours(18, 45, 0, 0)),\n  },\n  'sydney': {\n    location: 'Sydney',\n    temperature: 19.6,\n    feelsLike: 19.2,\n    humidity: 60,\n    pressure: 1020,\n    windSpeed: 7.5,\n    windDirection: 'E',\n    description: 'few clouds',\n    icon: '02d',\n    sunrise: new Date(new Date().setHours(6, 20, 0, 0)),\n    sunset: new Date(new Date().setHours(17, 10, 0, 0)),\n  },\n};\n\n// Generate mock forecast data\nconst generateMockForecast = (location: string): ForecastDay[] => {\n  const forecast: ForecastDay[] = [];\n  const weatherIcons = ['01d', '02d', '03d', '04d', '09d', '10d', '11d', '13d', '50d'];\n  const weatherDescriptions = [\n    'clear sky', 'few clouds', 'scattered clouds', 'broken clouds',\n    'shower rain', 'rain', 'thunderstorm', 'snow', 'mist'\n  ];\n  \n  const today = new Date();\n  \n  for (let i = 1; i <= 5; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() + i);\n    \n    const randomIconIndex = Math.floor(Math.random() * weatherIcons.length);\n    const baseTemp = location.toLowerCase().includes('sydney') || location.toLowerCase().includes('tokyo')\n      ? 22 + Math.random() * 8\n      : location.toLowerCase().includes('london')\n        ? 10 + Math.random() * 8\n        : 15 + Math.random() * 10;\n    \n    forecast.push({\n      date,\n      minTemp: baseTemp - (2 + Math.random() * 4),\n      maxTemp: baseTemp + (1 + Math.random() * 3),\n      description: weatherDescriptions[randomIconIndex],\n      icon: weatherIcons[randomIconIndex],\n      precipitation: Math.round(Math.random() * 100),\n      humidity: 40 + Math.round(Math.random() * 50),\n      windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10,\n    });\n  }\n  \n  return forecast;\n};\n\n// Get weather data for location\nexport const fetchWeatherData = async (\n  lat: number, \n  lon: number, \n  searchQuery?: string\n): Promise<WeatherData> => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n  \n  // For demo, we'll return mock data\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    if (searchQuery) {\n      const lowerCaseQuery = searchQuery.toLowerCase();\n      \n      // Check if we have mock data for the search query\n      if (mockWeatherData[lowerCaseQuery]) {\n        return mockWeatherData[lowerCaseQuery];\n      }\n      \n      // If not found, create a random weather for the location\n      // This would be a geocoding API call in a real app\n      return {\n        location: searchQuery,\n        temperature: 15 + Math.random() * 15,\n        feelsLike: 14 + Math.random() * 17,\n        humidity: 40 + Math.round(Math.random() * 50),\n        pressure: 1000 + Math.round(Math.random() * 30),\n        windSpeed: 2 + Math.round(Math.random() * 10 * 10) / 10,\n        windDirection: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'][Math.floor(Math.random() * 8)],\n        description: ['clear sky', 'few clouds', 'scattered clouds', 'broken clouds', 'shower rain', 'rain'][Math.floor(Math.random() * 6)],\n        icon: ['01d', '02d', '03d', '04d', '09d', '10d'][Math.floor(Math.random() * 6)],\n        sunrise: new Date(new Date().setHours(6, 0, 0, 0)),\n        sunset: new Date(new Date().setHours(20, 0, 0, 0)),\n      };\n    }\n    \n    // Use user coordinates to determine which mock city is closest\n    // For demo, we'll just return the default data\n    return mockWeatherData.default;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw new Error('Error fetching weather data');\n  }\n};\n\n// Get forecast for location\nexport const fetchForecast = async (\n  lat: number, \n  lon: number,\n  searchQuery?: string\n): Promise<ForecastDay[]> => {\n  // In a real application, this would call the OpenWeatherMap API\n  // Example API endpoint: https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}\n  \n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    const location = searchQuery || 'default';\n    return generateMockForecast(location);\n  } catch (error) {\n    console.error('Error fetching forecast data:', error);\n    throw new Error('Error fetching forecast data');\n  }\n}; "],"mappings":"AA2BA;AACA,KAAM,CAAAA,eAA+C,CAAG,CACtDC,OAAO,CAAE,CACPC,QAAQ,CAAE,UAAU,CACpBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,IAAI,CACnBC,WAAW,CAAE,eAAe,CAC5BC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CAAC,CACD,UAAU,CAAE,CACVX,QAAQ,CAAE,UAAU,CACpBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,IAAI,CACnBC,WAAW,CAAE,eAAe,CAC5BC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CAAC,CACD,eAAe,CAAE,CACfX,QAAQ,CAAE,eAAe,CACzBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,GAAG,CAClBC,WAAW,CAAE,WAAW,CACxBC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CAAC,CACD,QAAQ,CAAE,CACRX,QAAQ,CAAE,QAAQ,CAClBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,IAAI,CACnBC,WAAW,CAAE,YAAY,CACzBC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CAAC,CACD,OAAO,CAAE,CACPX,QAAQ,CAAE,OAAO,CACjBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,IAAI,CACnBC,WAAW,CAAE,kBAAkB,CAC/BC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CAAC,CACD,QAAQ,CAAE,CACRX,QAAQ,CAAE,QAAQ,CAClBC,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,IAAI,CACfC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,GAAG,CACdC,aAAa,CAAE,GAAG,CAClBC,WAAW,CAAE,YAAY,CACzBC,IAAI,CAAE,KAAK,CACXC,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CACnDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAE,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,CACF,CAAC,CAED;AACA,KAAM,CAAAE,oBAAoB,CAAIb,QAAgB,EAAoB,CAChE,KAAM,CAAAc,QAAuB,CAAG,EAAE,CAClC,KAAM,CAAAC,YAAY,CAAG,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CACpF,KAAM,CAAAC,mBAAmB,CAAG,CAC1B,WAAW,CAAE,YAAY,CAAE,kBAAkB,CAAE,eAAe,CAC9D,aAAa,CAAE,MAAM,CAAE,cAAc,CAAE,MAAM,CAAE,MAAM,CACtD,CAED,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAP,IAAI,CAAC,CAAC,CAExB,IAAK,GAAI,CAAAQ,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAT,IAAI,CAACO,KAAK,CAAC,CAC5BE,IAAI,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAGH,CAAC,CAAC,CAEjC,KAAM,CAAAI,eAAe,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGV,YAAY,CAACW,MAAM,CAAC,CACvE,KAAM,CAAAC,QAAQ,CAAG3B,QAAQ,CAAC4B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAI7B,QAAQ,CAAC4B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,CAClG,EAAE,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CACtBzB,QAAQ,CAAC4B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,CACvC,EAAE,CAAGN,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CACtB,EAAE,CAAGF,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAE7BX,QAAQ,CAACgB,IAAI,CAAC,CACZX,IAAI,CACJY,OAAO,CAAEJ,QAAQ,EAAI,CAAC,CAAGJ,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAC3CO,OAAO,CAAEL,QAAQ,EAAI,CAAC,CAAGJ,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAC3ClB,WAAW,CAAES,mBAAmB,CAACM,eAAe,CAAC,CACjDd,IAAI,CAAEO,YAAY,CAACO,eAAe,CAAC,CACnCW,aAAa,CAAEV,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CAC9CtB,QAAQ,CAAE,EAAE,CAAGoB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC7CpB,SAAS,CAAE,CAAC,CAAGkB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAC,CAAG,EACvD,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAX,QAAQ,CACjB,CAAC,CAED;AACA,MAAO,MAAM,CAAAqB,gBAAgB,CAAG,KAAAA,CAC9BC,GAAW,CACXC,GAAW,CACXC,WAAoB,GACK,CACzB;AACA;AAEA;AACA,GAAI,CACF;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAEtD,GAAIF,WAAW,CAAE,CACf,KAAM,CAAAI,cAAc,CAAGJ,WAAW,CAACV,WAAW,CAAC,CAAC,CAEhD;AACA,GAAI9B,eAAe,CAAC4C,cAAc,CAAC,CAAE,CACnC,MAAO,CAAA5C,eAAe,CAAC4C,cAAc,CAAC,CACxC,CAEA;AACA;AACA,MAAO,CACL1C,QAAQ,CAAEsC,WAAW,CACrBrC,WAAW,CAAE,EAAE,CAAGsB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CACpCvB,SAAS,CAAE,EAAE,CAAGqB,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAClCtB,QAAQ,CAAE,EAAE,CAAGoB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC7CrB,QAAQ,CAAE,IAAI,CAAGmB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAC/CpB,SAAS,CAAE,CAAC,CAAGkB,IAAI,CAACW,KAAK,CAACX,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAG,EAAE,CAAC,CAAG,EAAE,CACvDnB,aAAa,CAAE,CAAC,GAAG,CAAE,IAAI,CAAE,GAAG,CAAE,IAAI,CAAE,GAAG,CAAE,IAAI,CAAE,GAAG,CAAE,IAAI,CAAC,CAACiB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CAC1FlB,WAAW,CAAE,CAAC,WAAW,CAAE,YAAY,CAAE,kBAAkB,CAAE,eAAe,CAAE,aAAa,CAAE,MAAM,CAAC,CAACgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CACnIjB,IAAI,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAC,CAACe,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CAC/EhB,OAAO,CAAE,GAAI,CAAAC,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CAClDC,MAAM,CAAE,GAAI,CAAAF,IAAI,CAAC,GAAI,CAAAA,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACnD,CAAC,CACH,CAEA;AACA;AACA,MAAO,CAAAb,eAAe,CAACC,OAAO,CAChC,CAAE,MAAO4C,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,IAAI,CAAAE,KAAK,CAAC,6BAA6B,CAAC,CAChD,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,aAAa,CAAG,KAAAA,CAC3BV,GAAW,CACXC,GAAW,CACXC,WAAoB,GACO,CAC3B;AACA;AAEA,GAAI,CACF;AACA,KAAM,IAAI,CAAAC,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAEtD,KAAM,CAAAxC,QAAQ,CAAGsC,WAAW,EAAI,SAAS,CACzC,MAAO,CAAAzB,oBAAoB,CAACb,QAAQ,CAAC,CACvC,CAAE,MAAO2C,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,IAAI,CAAAE,KAAK,CAAC,8BAA8B,CAAC,CACjD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}