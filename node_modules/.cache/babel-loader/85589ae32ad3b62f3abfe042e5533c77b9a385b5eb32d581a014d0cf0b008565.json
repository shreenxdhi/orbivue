{"ast":null,"code":"// Types for satellite radio data\n\n// Mock satellite radio data\nconst mockSatelliteSignals = [{\n  id: 'iss',\n  name: 'ISS (ZARYA)',\n  isActive: true,\n  frequencies: [{\n    frequency: 145.8,\n    modulation: 'FM',\n    type: 'Voice',\n    isActive: true\n  }, {\n    frequency: 145.825,\n    modulation: 'AFSK',\n    type: 'Packet',\n    isActive: true\n  }, {\n    frequency: 437.55,\n    modulation: 'FM',\n    type: 'Voice',\n    isActive: false\n  }]\n}, {\n  id: 'noaa15',\n  name: 'NOAA 15',\n  isActive: true,\n  frequencies: [{\n    frequency: 137.62,\n    modulation: 'APT',\n    type: 'Weather Image',\n    isActive: true\n  }, {\n    frequency: 137.35,\n    modulation: 'DSB',\n    type: 'Data',\n    isActive: false\n  }]\n}, {\n  id: 'noaa18',\n  name: 'NOAA 18',\n  isActive: true,\n  frequencies: [{\n    frequency: 137.9125,\n    modulation: 'APT',\n    type: 'Weather Image',\n    isActive: true\n  }]\n}, {\n  id: 'noaa19',\n  name: 'NOAA 19',\n  isActive: true,\n  frequencies: [{\n    frequency: 137.1,\n    modulation: 'APT',\n    type: 'Weather Image',\n    isActive: true\n  }]\n}, {\n  id: 'meteor',\n  name: 'METEOR-M 2',\n  isActive: false,\n  frequencies: [{\n    frequency: 137.1,\n    modulation: 'LRPT',\n    type: 'Weather Image',\n    isActive: false\n  }]\n}, {\n  id: 'ao91',\n  name: 'FOX-1B (AO-91)',\n  isActive: true,\n  frequencies: [{\n    frequency: 145.96,\n    modulation: 'FM',\n    type: 'Uplink',\n    isActive: true\n  }, {\n    frequency: 435.25,\n    modulation: 'FM',\n    type: 'Downlink',\n    isActive: true\n  }]\n}, {\n  id: 'ao92',\n  name: 'FOX-1D (AO-92)',\n  isActive: true,\n  frequencies: [{\n    frequency: 435.35,\n    modulation: 'FM',\n    type: 'Uplink',\n    isActive: true\n  }, {\n    frequency: 145.88,\n    modulation: 'FM',\n    type: 'Downlink',\n    isActive: true\n  }]\n}, {\n  id: 'so50',\n  name: 'SO-50',\n  isActive: true,\n  frequencies: [{\n    frequency: 145.85,\n    modulation: 'FM',\n    type: 'Uplink',\n    isActive: true\n  }, {\n    frequency: 436.795,\n    modulation: 'FM',\n    type: 'Downlink',\n    isActive: true\n  }]\n}, {\n  id: 'po101',\n  name: 'PO-101',\n  isActive: false,\n  frequencies: [{\n    frequency: 437.405,\n    modulation: 'FSK',\n    type: 'Telemetry',\n    isActive: false\n  }]\n}, {\n  id: 'atl1',\n  name: 'ATLAS-1',\n  isActive: true,\n  frequencies: [{\n    frequency: 437.175,\n    modulation: 'GMSK',\n    type: 'Data',\n    isActive: true\n  }]\n}];\n\n/**\n * Fetches radio data for all satellites\n * In a real app, this would connect to SDR hardware or a web service\n */\nexport const fetchRadioData = async () => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(mockSatelliteSignals);\n    }, 800);\n  });\n};\n\n/**\n * Fetches radio data for a specific satellite\n */\nexport const fetchSatelliteRadioData = async satelliteId => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const satellite = mockSatelliteSignals.find(sat => sat.id === satelliteId);\n      resolve(satellite || null);\n    }, 500);\n  });\n};\n\n/**\n * In a real app, this would start recording a given frequency\n */\nexport const startRecording = async (satelliteId, frequency) => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        recordingId: `rec_${Date.now()}_${satelliteId}_${frequency}`\n      });\n    }, 300);\n  });\n};\n\n/**\n * In a real app, this would stop recording a given frequency\n */\nexport const stopRecording = async recordingId => {\n  // Simulate API call\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true\n      });\n    }, 300);\n  });\n};\n\n/**\n * Gets historical recorded data\n */\nexport const getRecordings = async satelliteId => {\n  // Simulate API call - in a real app, this would return recordings from a database\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([]);\n    }, 500);\n  });\n};","map":{"version":3,"names":["mockSatelliteSignals","id","name","isActive","frequencies","frequency","modulation","type","fetchRadioData","Promise","resolve","setTimeout","fetchSatelliteRadioData","satelliteId","satellite","find","sat","startRecording","success","recordingId","Date","now","stopRecording","getRecordings"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/radioService.ts"],"sourcesContent":["// Types for satellite radio data\nexport interface RadioFrequency {\n  frequency: number;  // MHz\n  modulation: string; // e.g., \"FM\", \"CW\", \"BPSK\"\n  type: string;       // e.g., \"Telemetry\", \"Voice\", \"Data\"\n  isActive: boolean;  // Whether the frequency is currently transmitting\n}\n\nexport interface SatelliteSignal {\n  id: string;\n  name: string;\n  isActive: boolean;\n  frequencies: RadioFrequency[];\n}\n\n// Mock satellite radio data\nconst mockSatelliteSignals: SatelliteSignal[] = [\n  {\n    id: 'iss',\n    name: 'ISS (ZARYA)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.8,\n        modulation: 'FM',\n        type: 'Voice',\n        isActive: true,\n      },\n      {\n        frequency: 145.825,\n        modulation: 'AFSK',\n        type: 'Packet',\n        isActive: true,\n      },\n      {\n        frequency: 437.55,\n        modulation: 'FM',\n        type: 'Voice',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'noaa15',\n    name: 'NOAA 15',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.62,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n      {\n        frequency: 137.35,\n        modulation: 'DSB',\n        type: 'Data',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'noaa18',\n    name: 'NOAA 18',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.9125,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'noaa19',\n    name: 'NOAA 19',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.1,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'meteor',\n    name: 'METEOR-M 2',\n    isActive: false,\n    frequencies: [\n      {\n        frequency: 137.1,\n        modulation: 'LRPT',\n        type: 'Weather Image',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'ao91',\n    name: 'FOX-1B (AO-91)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.96,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 435.25,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'ao92',\n    name: 'FOX-1D (AO-92)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 435.35,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 145.88,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'so50',\n    name: 'SO-50',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.85,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 436.795,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'po101',\n    name: 'PO-101',\n    isActive: false,\n    frequencies: [\n      {\n        frequency: 437.405,\n        modulation: 'FSK',\n        type: 'Telemetry',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'atl1',\n    name: 'ATLAS-1',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 437.175,\n        modulation: 'GMSK',\n        type: 'Data',\n        isActive: true,\n      },\n    ],\n  },\n];\n\n/**\n * Fetches radio data for all satellites\n * In a real app, this would connect to SDR hardware or a web service\n */\nexport const fetchRadioData = async (): Promise<SatelliteSignal[]> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockSatelliteSignals);\n    }, 800);\n  });\n};\n\n/**\n * Fetches radio data for a specific satellite\n */\nexport const fetchSatelliteRadioData = async (satelliteId: string): Promise<SatelliteSignal | null> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const satellite = mockSatelliteSignals.find(sat => sat.id === satelliteId);\n      resolve(satellite || null);\n    }, 500);\n  });\n};\n\n/**\n * In a real app, this would start recording a given frequency\n */\nexport const startRecording = async (satelliteId: string, frequency: number): Promise<{ success: boolean; recordingId?: string }> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        recordingId: `rec_${Date.now()}_${satelliteId}_${frequency}`,\n      });\n    }, 300);\n  });\n};\n\n/**\n * In a real app, this would stop recording a given frequency\n */\nexport const stopRecording = async (recordingId: string): Promise<{ success: boolean }> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ success: true });\n    }, 300);\n  });\n};\n\n/**\n * Gets historical recorded data\n */\nexport const getRecordings = async (satelliteId?: string): Promise<any[]> => {\n  // Simulate API call - in a real app, this would return recordings from a database\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([]);\n    }, 500);\n  });\n}; "],"mappings":"AAAA;;AAeA;AACA,MAAMA,oBAAuC,GAAG,CAC9C;EACEC,EAAE,EAAE,KAAK;EACTC,IAAI,EAAE,aAAa;EACnBC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,OAAO;IACbJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE,MAAM;IAClBC,IAAI,EAAE,QAAQ;IACdJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,OAAO;IACbJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,eAAe;IACrBJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,MAAM;IACZJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,QAAQ;IACnBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,eAAe;IACrBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,eAAe;IACrBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE,KAAK;EACfC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,MAAM;IAClBC,IAAI,EAAE,eAAe;IACrBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,QAAQ;IACdJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,UAAU;IAChBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,QAAQ;IACdJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,UAAU;IAChBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,OAAO;EACbC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,QAAQ;IACdJ,QAAQ,EAAE;EACZ,CAAC,EACD;IACEE,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAE,UAAU;IAChBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,KAAK;EACfC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE,WAAW;IACjBJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,EACD;EACEF,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,CACX;IACEC,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE,MAAM;IAClBC,IAAI,EAAE,MAAM;IACZJ,QAAQ,EAAE;EACZ,CAAC;AAEL,CAAC,CACF;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAwC;EACpE;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAACV,oBAAoB,CAAC;IAC/B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMY,uBAAuB,GAAG,MAAOC,WAAmB,IAAsC;EACrG;EACA,OAAO,IAAIJ,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMG,SAAS,GAAGd,oBAAoB,CAACe,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACf,EAAE,KAAKY,WAAW,CAAC;MAC1EH,OAAO,CAACI,SAAS,IAAI,IAAI,CAAC;IAC5B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAOJ,WAAmB,EAAER,SAAiB,KAA0D;EACnI;EACA,OAAO,IAAII,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNQ,OAAO,EAAE,IAAI;QACbC,WAAW,EAAE,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIR,WAAW,IAAIR,SAAS;MAC5D,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMiB,aAAa,GAAG,MAAOH,WAAmB,IAAoC;EACzF;EACA,OAAO,IAAIV,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QAAEQ,OAAO,EAAE;MAAK,CAAC,CAAC;IAC5B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAG,MAAOV,WAAoB,IAAqB;EAC3E;EACA,OAAO,IAAIJ,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC,EAAE,CAAC;IACb,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}