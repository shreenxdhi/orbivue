{"ast":null,"code":"import{twoline2satrec,propagate,gstime,eciToGeodetic}from'satellite.js';// Some common satellite TLEs (Two Line Elements)\nconst satelliteTLEs=[{name:'ISS (ZARYA)',noradId:'25544',tle1:'1 25544U 98067A   23135.56602164  .00011943  00000+0  21731-3 0  9990',tle2:'2 25544  51.6412 139.8584 0005939  99.5777  22.5867 15.50422536396622'},{name:'HUBBLE',noradId:'20580',tle1:'1 20580U 90037B   23135.59702084  .00001047  00000+0  57648-4 0  9998',tle2:'2 20580  28.4698  49.9784 0002983 151.9235 208.1888 15.09757481280530'},{name:'NOAA 19',noradId:'33591',tle1:'1 33591U 09005A   23135.62881757  .00000185  00000+0  12992-3 0  9991',tle2:'2 33591  99.1772  90.1232 0014038  64.8196 295.4420 14.12638143736515'},{name:'STARLINK-1832',noradId:'48232',tle1:'1 48232U 21021F   23135.56248697  .00008234  00000+0  45795-3 0  9994',tle2:'2 48232  53.0545  34.9888 0001361  82.3002 277.8132 15.06457568118080'},{name:'METEOR-M 2',noradId:'40069',tle1:'1 40069U 14037A   23135.62113429  .00000063  00000+0  47250-4 0  9992',tle2:'2 40069  98.5818  62.5093 0005173 155.1681 204.9752 14.20710431461200'},{name:'TERRA',noradId:'25994',tle1:'1 25994U 99068A   23135.55900412  .00000040  00000+0  27398-4 0  9992',tle2:'2 25994  98.1710  86.9662 0001433  83.9917 276.1433 14.57113761241945'},{name:'SUOMI NPP',noradId:'37849',tle1:'1 37849U 11061A   23135.61671031  .00000027  00000+0  29939-4 0  9996',tle2:'2 37849  98.7134  72.8358 0000853  85.4175 274.7093 14.19552906598661'},{name:'GOES 16',noradId:'41866',tle1:'1 41866U 16071A   23135.62499632 -.00000094  00000+0  00000+0 0  9991',tle2:'2 41866   0.0484 266.3489 0000574 221.5529 249.1005  1.00269684 24027'},{name:'LANDSAT 8',noradId:'39084',tle1:'1 39084U 13008A   23135.55893681  .00000026  00000+0  17800-4 0  9995',tle2:'2 39084  98.2301  84.9321 0001409  87.6342 272.4984 14.57111493544323'},{name:'AQUA',noradId:'27424',tle1:'1 27424U 02022A   23135.58887214  .00000037  00000+0  25849-4 0  9992',tle2:'2 27424  98.2118  86.3760 0001663  89.0988 271.0373 14.57116299111068'}];// Function to calculate if satellite is visible from a location\n// This is a simplified version - a real implementation would consider:\n// - Sun position (satellite must be in sunlight)\n// - Observer's local time (must be night or twilight)\n// - Satellite altitude and angle from observer\nconst isSatelliteVisible=(observerLat,observerLng,satelliteLat,satelliteLng,satelliteAlt)=>{// Simple distance calculation\nconst distance=Math.sqrt(Math.pow(observerLat-satelliteLat,2)+Math.pow(observerLng-satelliteLng,2));// Random factor to simulate different visibility conditions\nconst randomFactor=Math.random();// Higher altitude satellites are more likely to be visible\nconst altitudeFactor=satelliteAlt>500?0.7:0.3;// Combine factors - this is very simplified\nreturn distance<40&&randomFactor<altitudeFactor;};export const getSatellitePositions=async(observerLat,observerLng)=>{// In a real application, you would fetch this from an API\n// Like N2YO or CelesTrak\nconst satellites=[];const now=new Date();// For each satellite in our list\nsatelliteTLEs.forEach((satData,index)=>{try{// Parse the TLE data\nconst satrec=twoline2satrec(satData.tle1,satData.tle2);// Get current satellite position\nconst positionAndVelocity=propagate(satrec,now);if(positionAndVelocity&&positionAndVelocity.position&&positionAndVelocity.velocity){const gmst=gstime(now);const position=positionAndVelocity.position;const velocity=positionAndVelocity.velocity;// Check if position and velocity are actually ECI vectors and not booleans\nif(typeof position==='object'&&typeof velocity==='object'){// Convert the position to geodetic coordinates\nconst geodeticCoordinates=eciToGeodetic(position,gmst);// Convert radians to degrees\nconst longitude=geodeticCoordinates.longitude*180/Math.PI;const latitude=geodeticCoordinates.latitude*180/Math.PI;// Calculate the velocity magnitude in km/s\nconst velocityMag=Math.sqrt(Math.pow(velocity.x,2)+Math.pow(velocity.y,2)+Math.pow(velocity.z,2));// Check if the satellite is visible from the observer's location\nconst visible=isSatelliteVisible(observerLat,observerLng,latitude,longitude,geodeticCoordinates.height);satellites.push({id:index+1,name:satData.name,latitude,longitude,altitude:geodeticCoordinates.height,velocity:velocityMag,visible,noradId:satData.noradId});}}}catch(error){console.error(`Error calculating position for ${satData.name}:`,error);}});return satellites;};// Function to get TLE data from an API (to be implemented)\nexport const fetchSatelliteTLE=async noradId=>{// In a real implementation, this would fetch from N2YO, CelesTrak, or another provider\n// Example API endpoint: https://api.n2yo.com/rest/v1/satellite/tle/{noradId}&apiKey={apiKey}\n// For now, just return from our static data\nconst satellite=satelliteTLEs.find(sat=>sat.noradId===noradId);return satellite;};// Function to get satellite passes for a location (to be implemented)\nexport const getSatellitePasses=async function(noradId,observerLat,observerLng){let days=arguments.length>3&&arguments[3]!==undefined?arguments[3]:7;// In a real implementation, this would calculate or fetch upcoming passes\n// Example API: https://api.n2yo.com/rest/v1/satellite/visualpasses/{noradId}/{observerLat}/{observerLng}/0/{days}/&apiKey={apiKey}\n// For now, return mock data\nreturn{noradId,passes:[{startTime:new Date(Date.now()+3600000),// 1 hour from now\nendTime:new Date(Date.now()+3660000),// 1 hour and 10 minutes from now\nmaxElevation:52.3},{startTime:new Date(Date.now()+86400000),// 24 hours from now\nendTime:new Date(Date.now()+86460000),// 24 hours and 10 minutes from now\nmaxElevation:67.8}]};};","map":{"version":3,"names":["twoline2satrec","propagate","gstime","eciToGeodetic","satelliteTLEs","name","noradId","tle1","tle2","isSatelliteVisible","observerLat","observerLng","satelliteLat","satelliteLng","satelliteAlt","distance","Math","sqrt","pow","randomFactor","random","altitudeFactor","getSatellitePositions","satellites","now","Date","forEach","satData","index","satrec","positionAndVelocity","position","velocity","gmst","geodeticCoordinates","longitude","PI","latitude","velocityMag","x","y","z","visible","height","push","id","altitude","error","console","fetchSatelliteTLE","satellite","find","sat","getSatellitePasses","days","arguments","length","undefined","passes","startTime","endTime","maxElevation"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/satelliteService.ts"],"sourcesContent":["import { twoline2satrec, propagate, gstime, eciToGeodetic } from 'satellite.js';\n\ninterface Satellite {\n  id: number;\n  name: string;\n  latitude: number;\n  longitude: number;\n  altitude: number;\n  velocity: number;\n  visible: boolean;\n  noradId: string;\n}\n\n// Some common satellite TLEs (Two Line Elements)\nconst satelliteTLEs = [\n  {\n    name: 'ISS (ZARYA)',\n    noradId: '25544',\n    tle1: '1 25544U 98067A   23135.56602164  .00011943  00000+0  21731-3 0  9990',\n    tle2: '2 25544  51.6412 139.8584 0005939  99.5777  22.5867 15.50422536396622',\n  },\n  {\n    name: 'HUBBLE',\n    noradId: '20580',\n    tle1: '1 20580U 90037B   23135.59702084  .00001047  00000+0  57648-4 0  9998',\n    tle2: '2 20580  28.4698  49.9784 0002983 151.9235 208.1888 15.09757481280530',\n  },\n  {\n    name: 'NOAA 19',\n    noradId: '33591',\n    tle1: '1 33591U 09005A   23135.62881757  .00000185  00000+0  12992-3 0  9991',\n    tle2: '2 33591  99.1772  90.1232 0014038  64.8196 295.4420 14.12638143736515',\n  },\n  {\n    name: 'STARLINK-1832',\n    noradId: '48232',\n    tle1: '1 48232U 21021F   23135.56248697  .00008234  00000+0  45795-3 0  9994',\n    tle2: '2 48232  53.0545  34.9888 0001361  82.3002 277.8132 15.06457568118080',\n  },\n  {\n    name: 'METEOR-M 2',\n    noradId: '40069',\n    tle1: '1 40069U 14037A   23135.62113429  .00000063  00000+0  47250-4 0  9992',\n    tle2: '2 40069  98.5818  62.5093 0005173 155.1681 204.9752 14.20710431461200',\n  },\n  {\n    name: 'TERRA',\n    noradId: '25994',\n    tle1: '1 25994U 99068A   23135.55900412  .00000040  00000+0  27398-4 0  9992',\n    tle2: '2 25994  98.1710  86.9662 0001433  83.9917 276.1433 14.57113761241945',\n  },\n  {\n    name: 'SUOMI NPP',\n    noradId: '37849',\n    tle1: '1 37849U 11061A   23135.61671031  .00000027  00000+0  29939-4 0  9996',\n    tle2: '2 37849  98.7134  72.8358 0000853  85.4175 274.7093 14.19552906598661',\n  },\n  {\n    name: 'GOES 16',\n    noradId: '41866',\n    tle1: '1 41866U 16071A   23135.62499632 -.00000094  00000+0  00000+0 0  9991',\n    tle2: '2 41866   0.0484 266.3489 0000574 221.5529 249.1005  1.00269684 24027',\n  },\n  {\n    name: 'LANDSAT 8',\n    noradId: '39084',\n    tle1: '1 39084U 13008A   23135.55893681  .00000026  00000+0  17800-4 0  9995',\n    tle2: '2 39084  98.2301  84.9321 0001409  87.6342 272.4984 14.57111493544323',\n  },\n  {\n    name: 'AQUA',\n    noradId: '27424',\n    tle1: '1 27424U 02022A   23135.58887214  .00000037  00000+0  25849-4 0  9992',\n    tle2: '2 27424  98.2118  86.3760 0001663  89.0988 271.0373 14.57116299111068',\n  }\n];\n\n// Function to calculate if satellite is visible from a location\n// This is a simplified version - a real implementation would consider:\n// - Sun position (satellite must be in sunlight)\n// - Observer's local time (must be night or twilight)\n// - Satellite altitude and angle from observer\nconst isSatelliteVisible = (\n  observerLat: number,\n  observerLng: number,\n  satelliteLat: number,\n  satelliteLng: number,\n  satelliteAlt: number\n): boolean => {\n  // Simple distance calculation\n  const distance = Math.sqrt(\n    Math.pow(observerLat - satelliteLat, 2) + Math.pow(observerLng - satelliteLng, 2)\n  );\n  \n  // Random factor to simulate different visibility conditions\n  const randomFactor = Math.random();\n  \n  // Higher altitude satellites are more likely to be visible\n  const altitudeFactor = satelliteAlt > 500 ? 0.7 : 0.3;\n  \n  // Combine factors - this is very simplified\n  return distance < 40 && randomFactor < altitudeFactor;\n};\n\nexport const getSatellitePositions = async (\n  observerLat: number,\n  observerLng: number\n): Promise<Satellite[]> => {\n  // In a real application, you would fetch this from an API\n  // Like N2YO or CelesTrak\n  \n  const satellites: Satellite[] = [];\n  const now = new Date();\n  \n  // For each satellite in our list\n  satelliteTLEs.forEach((satData, index) => {\n    try {\n      // Parse the TLE data\n      const satrec = twoline2satrec(satData.tle1, satData.tle2);\n      \n      // Get current satellite position\n      const positionAndVelocity = propagate(satrec, now);\n      \n      if (positionAndVelocity && positionAndVelocity.position && positionAndVelocity.velocity) {\n        const gmst = gstime(now);\n        const position = positionAndVelocity.position;\n        const velocity = positionAndVelocity.velocity;\n\n        // Check if position and velocity are actually ECI vectors and not booleans\n        if (typeof position === 'object' && typeof velocity === 'object') {\n          // Convert the position to geodetic coordinates\n          const geodeticCoordinates = eciToGeodetic(position, gmst);\n          \n          // Convert radians to degrees\n          const longitude = geodeticCoordinates.longitude * 180 / Math.PI;\n          const latitude = geodeticCoordinates.latitude * 180 / Math.PI;\n          \n          // Calculate the velocity magnitude in km/s\n          const velocityMag = Math.sqrt(\n            Math.pow(velocity.x, 2) + \n            Math.pow(velocity.y, 2) + \n            Math.pow(velocity.z, 2)\n          );\n          \n          // Check if the satellite is visible from the observer's location\n          const visible = isSatelliteVisible(\n            observerLat, \n            observerLng, \n            latitude, \n            longitude, \n            geodeticCoordinates.height\n          );\n          \n          satellites.push({\n            id: index + 1,\n            name: satData.name,\n            latitude,\n            longitude,\n            altitude: geodeticCoordinates.height,\n            velocity: velocityMag,\n            visible,\n            noradId: satData.noradId\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error calculating position for ${satData.name}:`, error);\n    }\n  });\n  \n  return satellites;\n};\n\n// Function to get TLE data from an API (to be implemented)\nexport const fetchSatelliteTLE = async (noradId: string) => {\n  // In a real implementation, this would fetch from N2YO, CelesTrak, or another provider\n  // Example API endpoint: https://api.n2yo.com/rest/v1/satellite/tle/{noradId}&apiKey={apiKey}\n  \n  // For now, just return from our static data\n  const satellite = satelliteTLEs.find(sat => sat.noradId === noradId);\n  return satellite;\n};\n\n// Function to get satellite passes for a location (to be implemented)\nexport const getSatellitePasses = async (\n  noradId: string,\n  observerLat: number,\n  observerLng: number,\n  days: number = 7\n) => {\n  // In a real implementation, this would calculate or fetch upcoming passes\n  // Example API: https://api.n2yo.com/rest/v1/satellite/visualpasses/{noradId}/{observerLat}/{observerLng}/0/{days}/&apiKey={apiKey}\n  \n  // For now, return mock data\n  return {\n    noradId,\n    passes: [\n      {\n        startTime: new Date(Date.now() + 3600000), // 1 hour from now\n        endTime: new Date(Date.now() + 3660000),   // 1 hour and 10 minutes from now\n        maxElevation: 52.3\n      },\n      {\n        startTime: new Date(Date.now() + 86400000),   // 24 hours from now\n        endTime: new Date(Date.now() + 86460000),     // 24 hours and 10 minutes from now\n        maxElevation: 67.8\n      }\n    ]\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}