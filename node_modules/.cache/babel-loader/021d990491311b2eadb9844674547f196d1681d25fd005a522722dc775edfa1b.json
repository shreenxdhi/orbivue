{"ast":null,"code":"import { twoline2satrec, propagate, gstime, eciToGeodetic } from 'satellite.js';\n// Some common satellite TLEs (Two Line Elements)\nconst satelliteTLEs = [{\n  name: 'ISS (ZARYA)',\n  noradId: '25544',\n  tle1: '1 25544U 98067A   23135.56602164  .00011943  00000+0  21731-3 0  9990',\n  tle2: '2 25544  51.6412 139.8584 0005939  99.5777  22.5867 15.50422536396622'\n}, {\n  name: 'HUBBLE',\n  noradId: '20580',\n  tle1: '1 20580U 90037B   23135.59702084  .00001047  00000+0  57648-4 0  9998',\n  tle2: '2 20580  28.4698  49.9784 0002983 151.9235 208.1888 15.09757481280530'\n}, {\n  name: 'NOAA 19',\n  noradId: '33591',\n  tle1: '1 33591U 09005A   23135.62881757  .00000185  00000+0  12992-3 0  9991',\n  tle2: '2 33591  99.1772  90.1232 0014038  64.8196 295.4420 14.12638143736515'\n}, {\n  name: 'STARLINK-1832',\n  noradId: '48232',\n  tle1: '1 48232U 21021F   23135.56248697  .00008234  00000+0  45795-3 0  9994',\n  tle2: '2 48232  53.0545  34.9888 0001361  82.3002 277.8132 15.06457568118080'\n}, {\n  name: 'METEOR-M 2',\n  noradId: '40069',\n  tle1: '1 40069U 14037A   23135.62113429  .00000063  00000+0  47250-4 0  9992',\n  tle2: '2 40069  98.5818  62.5093 0005173 155.1681 204.9752 14.20710431461200'\n}, {\n  name: 'TERRA',\n  noradId: '25994',\n  tle1: '1 25994U 99068A   23135.55900412  .00000040  00000+0  27398-4 0  9992',\n  tle2: '2 25994  98.1710  86.9662 0001433  83.9917 276.1433 14.57113761241945'\n}, {\n  name: 'SUOMI NPP',\n  noradId: '37849',\n  tle1: '1 37849U 11061A   23135.61671031  .00000027  00000+0  29939-4 0  9996',\n  tle2: '2 37849  98.7134  72.8358 0000853  85.4175 274.7093 14.19552906598661'\n}, {\n  name: 'GOES 16',\n  noradId: '41866',\n  tle1: '1 41866U 16071A   23135.62499632 -.00000094  00000+0  00000+0 0  9991',\n  tle2: '2 41866   0.0484 266.3489 0000574 221.5529 249.1005  1.00269684 24027'\n}, {\n  name: 'LANDSAT 8',\n  noradId: '39084',\n  tle1: '1 39084U 13008A   23135.55893681  .00000026  00000+0  17800-4 0  9995',\n  tle2: '2 39084  98.2301  84.9321 0001409  87.6342 272.4984 14.57111493544323'\n}, {\n  name: 'AQUA',\n  noradId: '27424',\n  tle1: '1 27424U 02022A   23135.58887214  .00000037  00000+0  25849-4 0  9992',\n  tle2: '2 27424  98.2118  86.3760 0001663  89.0988 271.0373 14.57116299111068'\n}];\n\n// Function to calculate if satellite is visible from a location\n// This is a simplified version - a real implementation would consider:\n// - Sun position (satellite must be in sunlight)\n// - Observer's local time (must be night or twilight)\n// - Satellite altitude and angle from observer\nconst isSatelliteVisible = (observerLat, observerLng, satelliteLat, satelliteLng, satelliteAlt) => {\n  // Simple distance calculation\n  const distance = Math.sqrt(Math.pow(observerLat - satelliteLat, 2) + Math.pow(observerLng - satelliteLng, 2));\n\n  // Random factor to simulate different visibility conditions\n  const randomFactor = Math.random();\n\n  // Higher altitude satellites are more likely to be visible\n  const altitudeFactor = satelliteAlt > 500 ? 0.7 : 0.3;\n\n  // Combine factors - this is very simplified\n  return distance < 40 && randomFactor < altitudeFactor;\n};\nexport const getSatellitePositions = async (observerLat, observerLng) => {\n  // In a real application, you would fetch this from an API\n  // Like N2YO or CelesTrak\n\n  const satellites = [];\n  const now = new Date();\n\n  // For each satellite in our list\n  satelliteTLEs.forEach((satData, index) => {\n    try {\n      // Parse the TLE data\n      const satrec = twoline2satrec(satData.tle1, satData.tle2);\n\n      // Get current satellite position\n      const positionAndVelocity = propagate(satrec, now);\n      if (positionAndVelocity && positionAndVelocity.position && positionAndVelocity.velocity) {\n        const gmst = gstime(now);\n        const position = positionAndVelocity.position;\n        const velocity = positionAndVelocity.velocity;\n\n        // Check if position and velocity are actually ECI vectors and not booleans\n        if (typeof position === 'object' && typeof velocity === 'object') {\n          // Convert the position to geodetic coordinates\n          const geodeticCoordinates = eciToGeodetic(position, gmst);\n\n          // Convert radians to degrees\n          const longitude = geodeticCoordinates.longitude * 180 / Math.PI;\n          const latitude = geodeticCoordinates.latitude * 180 / Math.PI;\n\n          // Calculate the velocity magnitude in km/s\n          const velocityMag = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2) + Math.pow(velocity.z, 2));\n\n          // Check if the satellite is visible from the observer's location\n          const visible = isSatelliteVisible(observerLat, observerLng, latitude, longitude, geodeticCoordinates.height);\n          satellites.push({\n            id: index + 1,\n            name: satData.name,\n            latitude,\n            longitude,\n            altitude: geodeticCoordinates.height,\n            velocity: velocityMag,\n            visible,\n            noradId: satData.noradId\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error calculating position for ${satData.name}:`, error);\n    }\n  });\n  return satellites;\n};\n\n// Function to get TLE data from an API (to be implemented)\nexport const fetchSatelliteTLE = async noradId => {\n  // In a real implementation, this would fetch from N2YO, CelesTrak, or another provider\n  // Example API endpoint: https://api.n2yo.com/rest/v1/satellite/tle/{noradId}&apiKey={apiKey}\n\n  // For now, just return from our static data\n  const satellite = satelliteTLEs.find(sat => sat.noradId === noradId);\n  return satellite;\n};\n\n// Function to get satellite passes for a location (to be implemented)\nexport const getSatellitePasses = async (noradId, observerLat, observerLng, days = 7) => {\n  // In a real implementation, this would calculate or fetch upcoming passes\n  // Example API: https://api.n2yo.com/rest/v1/satellite/visualpasses/{noradId}/{observerLat}/{observerLng}/0/{days}/&apiKey={apiKey}\n\n  // For now, return mock data\n  return {\n    noradId,\n    passes: [{\n      startTime: new Date(Date.now() + 3600000),\n      // 1 hour from now\n      endTime: new Date(Date.now() + 3660000),\n      // 1 hour and 10 minutes from now\n      maxElevation: 52.3\n    }, {\n      startTime: new Date(Date.now() + 86400000),\n      // 24 hours from now\n      endTime: new Date(Date.now() + 86460000),\n      // 24 hours and 10 minutes from now\n      maxElevation: 67.8\n    }]\n  };\n};","map":{"version":3,"names":["twoline2satrec","propagate","gstime","eciToGeodetic","satelliteTLEs","name","noradId","tle1","tle2","isSatelliteVisible","observerLat","observerLng","satelliteLat","satelliteLng","satelliteAlt","distance","Math","sqrt","pow","randomFactor","random","altitudeFactor","getSatellitePositions","satellites","now","Date","forEach","satData","index","satrec","positionAndVelocity","position","velocity","gmst","geodeticCoordinates","longitude","PI","latitude","velocityMag","x","y","z","visible","height","push","id","altitude","error","console","fetchSatelliteTLE","satellite","find","sat","getSatellitePasses","days","passes","startTime","endTime","maxElevation"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/satelliteService.ts"],"sourcesContent":["import { twoline2satrec, propagate, gstime, eciToGeodetic } from 'satellite.js';\n\ninterface Satellite {\n  id: number;\n  name: string;\n  latitude: number;\n  longitude: number;\n  altitude: number;\n  velocity: number;\n  visible: boolean;\n  noradId: string;\n}\n\n// Some common satellite TLEs (Two Line Elements)\nconst satelliteTLEs = [\n  {\n    name: 'ISS (ZARYA)',\n    noradId: '25544',\n    tle1: '1 25544U 98067A   23135.56602164  .00011943  00000+0  21731-3 0  9990',\n    tle2: '2 25544  51.6412 139.8584 0005939  99.5777  22.5867 15.50422536396622',\n  },\n  {\n    name: 'HUBBLE',\n    noradId: '20580',\n    tle1: '1 20580U 90037B   23135.59702084  .00001047  00000+0  57648-4 0  9998',\n    tle2: '2 20580  28.4698  49.9784 0002983 151.9235 208.1888 15.09757481280530',\n  },\n  {\n    name: 'NOAA 19',\n    noradId: '33591',\n    tle1: '1 33591U 09005A   23135.62881757  .00000185  00000+0  12992-3 0  9991',\n    tle2: '2 33591  99.1772  90.1232 0014038  64.8196 295.4420 14.12638143736515',\n  },\n  {\n    name: 'STARLINK-1832',\n    noradId: '48232',\n    tle1: '1 48232U 21021F   23135.56248697  .00008234  00000+0  45795-3 0  9994',\n    tle2: '2 48232  53.0545  34.9888 0001361  82.3002 277.8132 15.06457568118080',\n  },\n  {\n    name: 'METEOR-M 2',\n    noradId: '40069',\n    tle1: '1 40069U 14037A   23135.62113429  .00000063  00000+0  47250-4 0  9992',\n    tle2: '2 40069  98.5818  62.5093 0005173 155.1681 204.9752 14.20710431461200',\n  },\n  {\n    name: 'TERRA',\n    noradId: '25994',\n    tle1: '1 25994U 99068A   23135.55900412  .00000040  00000+0  27398-4 0  9992',\n    tle2: '2 25994  98.1710  86.9662 0001433  83.9917 276.1433 14.57113761241945',\n  },\n  {\n    name: 'SUOMI NPP',\n    noradId: '37849',\n    tle1: '1 37849U 11061A   23135.61671031  .00000027  00000+0  29939-4 0  9996',\n    tle2: '2 37849  98.7134  72.8358 0000853  85.4175 274.7093 14.19552906598661',\n  },\n  {\n    name: 'GOES 16',\n    noradId: '41866',\n    tle1: '1 41866U 16071A   23135.62499632 -.00000094  00000+0  00000+0 0  9991',\n    tle2: '2 41866   0.0484 266.3489 0000574 221.5529 249.1005  1.00269684 24027',\n  },\n  {\n    name: 'LANDSAT 8',\n    noradId: '39084',\n    tle1: '1 39084U 13008A   23135.55893681  .00000026  00000+0  17800-4 0  9995',\n    tle2: '2 39084  98.2301  84.9321 0001409  87.6342 272.4984 14.57111493544323',\n  },\n  {\n    name: 'AQUA',\n    noradId: '27424',\n    tle1: '1 27424U 02022A   23135.58887214  .00000037  00000+0  25849-4 0  9992',\n    tle2: '2 27424  98.2118  86.3760 0001663  89.0988 271.0373 14.57116299111068',\n  }\n];\n\n// Function to calculate if satellite is visible from a location\n// This is a simplified version - a real implementation would consider:\n// - Sun position (satellite must be in sunlight)\n// - Observer's local time (must be night or twilight)\n// - Satellite altitude and angle from observer\nconst isSatelliteVisible = (\n  observerLat: number,\n  observerLng: number,\n  satelliteLat: number,\n  satelliteLng: number,\n  satelliteAlt: number\n): boolean => {\n  // Simple distance calculation\n  const distance = Math.sqrt(\n    Math.pow(observerLat - satelliteLat, 2) + Math.pow(observerLng - satelliteLng, 2)\n  );\n  \n  // Random factor to simulate different visibility conditions\n  const randomFactor = Math.random();\n  \n  // Higher altitude satellites are more likely to be visible\n  const altitudeFactor = satelliteAlt > 500 ? 0.7 : 0.3;\n  \n  // Combine factors - this is very simplified\n  return distance < 40 && randomFactor < altitudeFactor;\n};\n\nexport const getSatellitePositions = async (\n  observerLat: number,\n  observerLng: number\n): Promise<Satellite[]> => {\n  // In a real application, you would fetch this from an API\n  // Like N2YO or CelesTrak\n  \n  const satellites: Satellite[] = [];\n  const now = new Date();\n  \n  // For each satellite in our list\n  satelliteTLEs.forEach((satData, index) => {\n    try {\n      // Parse the TLE data\n      const satrec = twoline2satrec(satData.tle1, satData.tle2);\n      \n      // Get current satellite position\n      const positionAndVelocity = propagate(satrec, now);\n      \n      if (positionAndVelocity && positionAndVelocity.position && positionAndVelocity.velocity) {\n        const gmst = gstime(now);\n        const position = positionAndVelocity.position;\n        const velocity = positionAndVelocity.velocity;\n\n        // Check if position and velocity are actually ECI vectors and not booleans\n        if (typeof position === 'object' && typeof velocity === 'object') {\n          // Convert the position to geodetic coordinates\n          const geodeticCoordinates = eciToGeodetic(position, gmst);\n          \n          // Convert radians to degrees\n          const longitude = geodeticCoordinates.longitude * 180 / Math.PI;\n          const latitude = geodeticCoordinates.latitude * 180 / Math.PI;\n          \n          // Calculate the velocity magnitude in km/s\n          const velocityMag = Math.sqrt(\n            Math.pow(velocity.x, 2) + \n            Math.pow(velocity.y, 2) + \n            Math.pow(velocity.z, 2)\n          );\n          \n          // Check if the satellite is visible from the observer's location\n          const visible = isSatelliteVisible(\n            observerLat, \n            observerLng, \n            latitude, \n            longitude, \n            geodeticCoordinates.height\n          );\n          \n          satellites.push({\n            id: index + 1,\n            name: satData.name,\n            latitude,\n            longitude,\n            altitude: geodeticCoordinates.height,\n            velocity: velocityMag,\n            visible,\n            noradId: satData.noradId\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error calculating position for ${satData.name}:`, error);\n    }\n  });\n  \n  return satellites;\n};\n\n// Function to get TLE data from an API (to be implemented)\nexport const fetchSatelliteTLE = async (noradId: string) => {\n  // In a real implementation, this would fetch from N2YO, CelesTrak, or another provider\n  // Example API endpoint: https://api.n2yo.com/rest/v1/satellite/tle/{noradId}&apiKey={apiKey}\n  \n  // For now, just return from our static data\n  const satellite = satelliteTLEs.find(sat => sat.noradId === noradId);\n  return satellite;\n};\n\n// Function to get satellite passes for a location (to be implemented)\nexport const getSatellitePasses = async (\n  noradId: string,\n  observerLat: number,\n  observerLng: number,\n  days: number = 7\n) => {\n  // In a real implementation, this would calculate or fetch upcoming passes\n  // Example API: https://api.n2yo.com/rest/v1/satellite/visualpasses/{noradId}/{observerLat}/{observerLng}/0/{days}/&apiKey={apiKey}\n  \n  // For now, return mock data\n  return {\n    noradId,\n    passes: [\n      {\n        startTime: new Date(Date.now() + 3600000), // 1 hour from now\n        endTime: new Date(Date.now() + 3660000),   // 1 hour and 10 minutes from now\n        maxElevation: 52.3\n      },\n      {\n        startTime: new Date(Date.now() + 86400000),   // 24 hours from now\n        endTime: new Date(Date.now() + 86460000),     // 24 hours and 10 minutes from now\n        maxElevation: 67.8\n      }\n    ]\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}