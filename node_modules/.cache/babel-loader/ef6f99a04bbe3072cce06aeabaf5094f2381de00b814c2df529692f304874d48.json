{"ast":null,"code":"// Types for satellite radio data\n// Mock satellite radio data\nconst mockSatelliteSignals=[{id:'iss',name:'ISS (ZARYA)',isActive:true,frequencies:[{frequency:145.8,modulation:'FM',type:'Voice',isActive:true},{frequency:145.825,modulation:'AFSK',type:'Packet',isActive:true},{frequency:437.55,modulation:'FM',type:'Voice',isActive:false}]},{id:'noaa15',name:'NOAA 15',isActive:true,frequencies:[{frequency:137.62,modulation:'APT',type:'Weather Image',isActive:true},{frequency:137.35,modulation:'DSB',type:'Data',isActive:false}]},{id:'noaa18',name:'NOAA 18',isActive:true,frequencies:[{frequency:137.9125,modulation:'APT',type:'Weather Image',isActive:true}]},{id:'noaa19',name:'NOAA 19',isActive:true,frequencies:[{frequency:137.1,modulation:'APT',type:'Weather Image',isActive:true}]},{id:'meteor',name:'METEOR-M 2',isActive:false,frequencies:[{frequency:137.1,modulation:'LRPT',type:'Weather Image',isActive:false}]},{id:'ao91',name:'FOX-1B (AO-91)',isActive:true,frequencies:[{frequency:145.96,modulation:'FM',type:'Uplink',isActive:true},{frequency:435.25,modulation:'FM',type:'Downlink',isActive:true}]},{id:'ao92',name:'FOX-1D (AO-92)',isActive:true,frequencies:[{frequency:435.35,modulation:'FM',type:'Uplink',isActive:true},{frequency:145.88,modulation:'FM',type:'Downlink',isActive:true}]},{id:'so50',name:'SO-50',isActive:true,frequencies:[{frequency:145.85,modulation:'FM',type:'Uplink',isActive:true},{frequency:436.795,modulation:'FM',type:'Downlink',isActive:true}]},{id:'po101',name:'PO-101',isActive:false,frequencies:[{frequency:437.405,modulation:'FSK',type:'Telemetry',isActive:false}]},{id:'atl1',name:'ATLAS-1',isActive:true,frequencies:[{frequency:437.175,modulation:'GMSK',type:'Data',isActive:true}]}];/**\n * Fetches radio data for all satellites\n * In a real app, this would connect to SDR hardware or a web service\n */export const fetchRadioData=async()=>{// Simulate API call\nreturn new Promise(resolve=>{setTimeout(()=>{resolve(mockSatelliteSignals);},800);});};/**\n * Fetches radio data for a specific satellite\n */export const fetchSatelliteRadioData=async satelliteId=>{// Simulate API call\nreturn new Promise(resolve=>{setTimeout(()=>{const satellite=mockSatelliteSignals.find(sat=>sat.id===satelliteId);resolve(satellite||null);},500);});};/**\n * In a real app, this would start recording a given frequency\n */export const startRecording=async(satelliteId,frequency)=>{// Simulate API call\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({success:true,recordingId:`rec_${Date.now()}_${satelliteId}_${frequency}`});},300);});};/**\n * In a real app, this would stop recording a given frequency\n */export const stopRecording=async recordingId=>{// Simulate API call\nreturn new Promise(resolve=>{setTimeout(()=>{resolve({success:true});},300);});};/**\n * Gets historical recorded data\n */export const getRecordings=async satelliteId=>{// Simulate API call - in a real app, this would return recordings from a database\nreturn new Promise(resolve=>{setTimeout(()=>{resolve([]);},500);});};","map":{"version":3,"names":["mockSatelliteSignals","id","name","isActive","frequencies","frequency","modulation","type","fetchRadioData","Promise","resolve","setTimeout","fetchSatelliteRadioData","satelliteId","satellite","find","sat","startRecording","success","recordingId","Date","now","stopRecording","getRecordings"],"sources":["/Users/shreenidhivasishta/sat/orbivue/src/services/radioService.ts"],"sourcesContent":["// Types for satellite radio data\nexport interface RadioFrequency {\n  frequency: number;  // MHz\n  modulation: string; // e.g., \"FM\", \"CW\", \"BPSK\"\n  type: string;       // e.g., \"Telemetry\", \"Voice\", \"Data\"\n  isActive: boolean;  // Whether the frequency is currently transmitting\n}\n\nexport interface SatelliteSignal {\n  id: string;\n  name: string;\n  isActive: boolean;\n  frequencies: RadioFrequency[];\n}\n\n// Mock satellite radio data\nconst mockSatelliteSignals: SatelliteSignal[] = [\n  {\n    id: 'iss',\n    name: 'ISS (ZARYA)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.8,\n        modulation: 'FM',\n        type: 'Voice',\n        isActive: true,\n      },\n      {\n        frequency: 145.825,\n        modulation: 'AFSK',\n        type: 'Packet',\n        isActive: true,\n      },\n      {\n        frequency: 437.55,\n        modulation: 'FM',\n        type: 'Voice',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'noaa15',\n    name: 'NOAA 15',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.62,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n      {\n        frequency: 137.35,\n        modulation: 'DSB',\n        type: 'Data',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'noaa18',\n    name: 'NOAA 18',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.9125,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'noaa19',\n    name: 'NOAA 19',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 137.1,\n        modulation: 'APT',\n        type: 'Weather Image',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'meteor',\n    name: 'METEOR-M 2',\n    isActive: false,\n    frequencies: [\n      {\n        frequency: 137.1,\n        modulation: 'LRPT',\n        type: 'Weather Image',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'ao91',\n    name: 'FOX-1B (AO-91)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.96,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 435.25,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'ao92',\n    name: 'FOX-1D (AO-92)',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 435.35,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 145.88,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'so50',\n    name: 'SO-50',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 145.85,\n        modulation: 'FM',\n        type: 'Uplink',\n        isActive: true,\n      },\n      {\n        frequency: 436.795,\n        modulation: 'FM',\n        type: 'Downlink',\n        isActive: true,\n      },\n    ],\n  },\n  {\n    id: 'po101',\n    name: 'PO-101',\n    isActive: false,\n    frequencies: [\n      {\n        frequency: 437.405,\n        modulation: 'FSK',\n        type: 'Telemetry',\n        isActive: false,\n      },\n    ],\n  },\n  {\n    id: 'atl1',\n    name: 'ATLAS-1',\n    isActive: true,\n    frequencies: [\n      {\n        frequency: 437.175,\n        modulation: 'GMSK',\n        type: 'Data',\n        isActive: true,\n      },\n    ],\n  },\n];\n\n/**\n * Fetches radio data for all satellites\n * In a real app, this would connect to SDR hardware or a web service\n */\nexport const fetchRadioData = async (): Promise<SatelliteSignal[]> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockSatelliteSignals);\n    }, 800);\n  });\n};\n\n/**\n * Fetches radio data for a specific satellite\n */\nexport const fetchSatelliteRadioData = async (satelliteId: string): Promise<SatelliteSignal | null> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const satellite = mockSatelliteSignals.find(sat => sat.id === satelliteId);\n      resolve(satellite || null);\n    }, 500);\n  });\n};\n\n/**\n * In a real app, this would start recording a given frequency\n */\nexport const startRecording = async (satelliteId: string, frequency: number): Promise<{ success: boolean; recordingId?: string }> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        recordingId: `rec_${Date.now()}_${satelliteId}_${frequency}`,\n      });\n    }, 300);\n  });\n};\n\n/**\n * In a real app, this would stop recording a given frequency\n */\nexport const stopRecording = async (recordingId: string): Promise<{ success: boolean }> => {\n  // Simulate API call\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ success: true });\n    }, 300);\n  });\n};\n\n/**\n * Gets historical recorded data\n */\nexport const getRecordings = async (satelliteId?: string): Promise<any[]> => {\n  // Simulate API call - in a real app, this would return recordings from a database\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve([]);\n    }, 500);\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}